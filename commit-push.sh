#!/bin/bash

# Script para commit e push autom√°tico para GitHub
# Uso: ./commit-push.sh "mensagem do commit"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Iniciando processo de commit e push para GitHub...${NC}"
echo ""

# 1. Verificar se foi passada uma mensagem de commit
if [ -z "$1" ]; then
    echo -e "${RED}‚ùå Erro: Mensagem de commit √© obrigat√≥ria!${NC}"
    echo -e "${YELLOW}üí° Uso: ./commit-push.sh \"sua mensagem de commit\"${NC}"
    exit 1
fi

COMMIT_MESSAGE="$1"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

echo -e "${BLUE}üìù Mensagem do commit: ${YELLOW}$COMMIT_MESSAGE${NC}"
echo ""

# 2. Verificar status do git
echo -e "${BLUE}üîç Verificando status do reposit√≥rio...${NC}"
git status --porcelain > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erro: Este n√£o √© um reposit√≥rio Git v√°lido!${NC}"
    exit 1
fi

# Verificar se h√° mudan√ßas
if [ -z "$(git status --porcelain)" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Nenhuma mudan√ßa detectada para commit.${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è  Verificando se h√° commits para push...${NC}"
    
    # Verificar se h√° commits n√£o enviados
    UNPUSHED=$(git log --oneline origin/main..HEAD 2>/dev/null | wc -l)
    if [ "$UNPUSHED" -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Reposit√≥rio j√° est√° sincronizado com o GitHub!${NC}"
        exit 0
    else
        echo -e "${YELLOW}üì§ H√° $UNPUSHED commit(s) para enviar...${NC}"
        # Pular para o push
        git push origin main
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Push realizado com sucesso!${NC}"
        else
            echo -e "${RED}‚ùå Erro no push!${NC}"
            exit 1
        fi
        exit 0
    fi
fi

# 3. Mostrar arquivos que ser√£o commitados
echo -e "${BLUE}üìã Arquivos modificados:${NC}"
git status --short

echo ""
read -p "$(echo -e ${YELLOW}Continuar com o commit? [Y/n]: ${NC})" -n 1 -r
echo ""

if [[ $REPLY =~ ^[Nn]$ ]]; then
    echo -e "${YELLOW}‚ùå Opera√ß√£o cancelada pelo usu√°rio.${NC}"
    exit 0
fi

# 4. Adicionar todos os arquivos
echo -e "${BLUE}üì¶ Adicionando arquivos ao staging area...${NC}"
git add .

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erro ao adicionar arquivos!${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Arquivos adicionados com sucesso!${NC}"

# 5. Fazer commit
echo -e "${BLUE}üíæ Fazendo commit...${NC}"
git commit -m "$COMMIT_MESSAGE"

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erro no commit!${NC}"
    exit 1
fi

COMMIT_HASH=$(git rev-parse --short HEAD)
echo -e "${GREEN}‚úÖ Commit realizado com sucesso! Hash: $COMMIT_HASH${NC}"

# 6. Push para GitHub
echo -e "${BLUE}üåê Enviando para GitHub...${NC}"
git push origin main

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erro no push para GitHub!${NC}"
    echo -e "${YELLOW}üí° Verifique sua conex√£o e credenciais do Git.${NC}"
    exit 1
fi

# 7. Verificar se o push foi bem-sucedido
echo -e "${BLUE}üîç Verificando sincroniza√ß√£o...${NC}"
git fetch origin main --quiet
LOCAL_HASH=$(git rev-parse HEAD)
REMOTE_HASH=$(git rev-parse origin/main)

if [ "$LOCAL_HASH" = "$REMOTE_HASH" ]; then
    echo -e "${GREEN}‚úÖ Reposit√≥rio sincronizado com sucesso!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aten√ß√£o: Pode haver diferen√ßas entre local e remoto.${NC}"
fi

# 8. Resumo final
echo ""
echo -e "${GREEN}üéâ Processo conclu√≠do com sucesso!${NC}"
echo -e "${BLUE}üìä Resumo:${NC}"
echo -e "   ‚Ä¢ Commit: ${YELLOW}$COMMIT_HASH${NC}"
echo -e "   ‚Ä¢ Mensagem: ${YELLOW}$COMMIT_MESSAGE${NC}"
echo -e "   ‚Ä¢ Timestamp: ${YELLOW}$TIMESTAMP${NC}"
echo -e "   ‚Ä¢ Branch: ${YELLOW}main${NC}"
echo ""
echo -e "${BLUE}üîó Verifique no GitHub: ${YELLOW}https://github.com/seu-usuario/gestao-educa${NC}"
echo ""